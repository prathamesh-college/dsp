#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node in the linked list
struct Node {
    int data;           // Data part of the node
    struct Node* next;  // Pointer to the next node
};

// Structure to represent a stack
struct Stack {
    struct Node* top;   // Pointer to the top node of the stack
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); // Allocate memory for a new node
    newNode->data = data;      // Set the data
    newNode->next = NULL;      // Initialize next pointer to NULL
    return newNode;            // Return the new node
}

// Function to create and initialize a stack
struct Stack* createStack() {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->top = NULL; // Initialize top to NULL (indicating an empty stack)
    return stack;
}

// Function to check if the stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == NULL; // Stack is empty if top is NULL
}

// Function to add an element to the stack
void push(struct Stack* stack, int value) {
    struct Node* newNode = createNode(value); // Create a new node
    newNode->next = stack->top; // Link the new node to the previous top
    stack->top = newNode; // Update the top to the new node
    printf("Pushed: %d\n", value);
}

// Function to remove an element from the stack
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty! Cannot pop.\n");
        return -1; // Return -1 if the stack is empty
    }
    struct Node* temp = stack->top; // Get the top node
    int poppedValue = temp->data; // Store the data to return
    stack->top = stack->top->next; // Update the top to the next node
    free(temp); // Free the memory of the popped node
    return poppedValue; // Return the popped value
}

// Function to peek at the top element of the stack
int peek(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty! Cannot peek.\n");
        return -1; // Return -1 if the stack is empty
    }
    return stack->top->data; // Return the data of the top node
}

// Function to display the elements of the stack
void displayStack(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty!\n");
        return;
    }
    struct Node* current = stack->top; // Start from the top node
    printf("Stack elements: ");
    while (current != NULL) {
        printf("%d ", current->data); // Print the data of each node
        current = current->next; // Move to the next node
    }
    printf("\n");
}

// Main function to demonstrate stack operations
int main() {
    struct Stack* stack = createStack(); // Create a stack

    // Perform stack operations
    push(stack, 10);
    push(stack, 20);
    push(stack, 30);
    displayStack(stack); // Display the stack

    printf("Popped: %d\n", pop(stack)); // Remove an element
    displayStack(stack); // Display the stack

    printf("Top element: %d\n", peek(stack)); // Peek at the top element

    push(stack, 40); // Add another element
    push(stack, 50); // Add another element
    displayStack(stack); // Display the stack

    // Pop all elements
    pop(stack);
    pop(stack);
    pop(stack);
    pop(stack); // Try to pop from an empty stack

    return 0;
}

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node in the linked list
struct Node {
    int data;           // Data part of the node
    struct Node* next;  // Pointer to the next node
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); // Allocate memory for a new node
    newNode->data = data;      // Set the data
    newNode->next = NULL;      // Initialize next pointer to NULL
    return newNode;            // Return the new node
}

// Function to insert a node at the end of the linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data); // Create a new node
    if (*head == NULL) { // If the list is empty
        *head = newNode; // Make the new node the head
        return;
    }
    struct Node* temp = *head; // Temporary pointer to traverse the list
    while (temp->next != NULL) { // Traverse to the last node
        temp = temp->next;
    }
    temp->next = newNode; // Link the last node to the new node
}

// Function to delete a node by value
void deleteNode(struct Node** head, int key) {
    struct Node* temp = *head; // Temporary pointer to traverse the list
    struct Node* prev = NULL; // Pointer to keep track of the previous node

    // If the head node itself holds the key to be deleted
    if (temp != NULL && temp->data == key) {
        *head = temp->next; // Change head
        free(temp);         // Free old head
        return;
    }

    // Search for the key to be deleted, keep track of the previous node
    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }

    // If the key was not present in the linked list
    if (temp == NULL) return;

    // Unlink the node from the linked list
    prev->next = temp->next;
    free(temp); // Free memory
}

// Function to print the linked list
void printList(struct Node* node) {
    while (node != NULL) {
        printf("%d -> ", node->data);
        node = node->next;
    }
    printf("NULL\n");
}

// Main function to demonstrate linked list operations
int main() {
    struct Node* head = NULL; // Initialize the head of the linked list

    // Insert nodes into the linked list
    insertEnd(&head, 10);
    insertEnd(&head, 20);
    insertEnd(&head, 30);
    insertEnd(&head, 40);

    printf("Linked List after insertion: ");
    printList(head); // Print the linked list

    // Delete a node
    deleteNode(&head, 20);
    printf("Linked List after deleting 20: ");
    printList(head); // Print the linked list

    // Delete a node that doesn't exist
    deleteNode(&head, 50);
    printf("Linked List after trying to delete 50: ");
    printList(head); // Print the linked list

    return 0;
}

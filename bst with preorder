#include <stdio.h>
#include <stdlib.h>

// Structure for BST node
struct Node {
    int data;
    struct Node *left;
    struct Node *right;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a value into BST
struct Node* insert(struct Node* root, int value) {
    // If tree is empty, create a new node as root
    if (root == NULL) {
        return createNode(value);
    }
    
    // Otherwise, recur down the tree
    if (value < root->data) {
        root->left = insert(root->left, value);
    } else if (value > root->data) {
        root->right = insert(root->right, value);
    }
    
    // Return the unchanged node pointer
    return root;
}

// Function to perform preorder traversal (Root-Left-Right)
void preorder(struct Node* root) {
    if (root != NULL) {
        // First print the node's data
        printf("%d ", root->data);
        
        // Then traverse left subtree
        preorder(root->left);
        
        // Finally traverse right subtree
        preorder(root->right);
    }
}

// Function to display the menu
void displayMenu() {
    printf("\n--- Binary Search Tree Operations ---\n");
    printf("1. Insert a value\n");
    printf("2. Display Preorder traversal\n");
    printf("3. Exit\n");
    printf("Enter your choice: ");
}

// Main function
int main() {
    struct Node* root = NULL;
    int choice, value;
    
    do {
        displayMenu();
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                root = insert(root, value);
                printf("%d inserted into the BST\n", value);
                break;
                
            case 2:
                printf("Preorder traversal: ");
                if (root == NULL) {
                    printf("Tree is empty");
                } else {
                    preorder(root);
                }
                printf("\n");
                break;
                
            case 3:
                printf("Exiting program\n");
                break;
                
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 3);
    
    return 0;
}

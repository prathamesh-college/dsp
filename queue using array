#include <stdio.h>
#include <stdlib.h>

#define MAX 5 // Maximum size of the queue

// Structure to represent a queue
struct Queue {
    int items[MAX]; // Array to store queue elements
    int front;      // Index of the front element
    int rear;       // Index of the rear element
};

// Function to create and initialize a queue
struct Queue* createQueue() {
    struct Queue* q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = -1; // Initialize front
    q->rear = -1;  // Initialize rear
    return q;
}

// Function to check if the queue is full
int isFull(struct Queue* q) {
    return (q->rear == MAX - 1);
}

// Function to check if the queue is empty
int isEmpty(struct Queue* q) {
    return (q->front == -1 || q->front > q->rear);
}

// Function to add an element to the queue
void enqueue(struct Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue is full! Cannot enqueue %d\n", value);
        return;
    }
    if (q->front == -1) {
        q->front = 0; // Set front to 0 if it's the first element
    }
    q->rear++; // Move rear to the next position
    q->items[q->rear] = value; // Add the new element
    printf("Enqueued: %d\n", value);
}

// Function to remove an element from the queue
int dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty! Cannot dequeue.\n");
        return -1; // Return -1 if the queue is empty
    }
    int dequeuedValue = q->items[q->front]; // Get the front element
    q->front++; // Move front to the next position
    if (q->front > q->rear) { // Reset the queue if it becomes empty
        q->front = -1;
        q->rear = -1;
    }
    printf("Dequeued: %d\n", dequeuedValue);
    return dequeuedValue; // Return the dequeued value
}

// Function to display the elements of the queue
void displayQueue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return;
    }
    printf("Queue elements: ");
    for (int i = q->front; i <= q->rear; i++) {
        printf("%d ", q->items[i]);
    }
    printf("\n");
}

// Main function to demonstrate queue operations
int main() {
    struct Queue* q = createQueue(); // Create a queue

    // Perform queue operations
    enqueue(q, 10);
    enqueue(q, 20);
    enqueue(q, 30);
    enqueue(q, 40);
    enqueue(q, 50);
    displayQueue(q); // Display the queue

    dequeue(q); // Remove an element
    displayQueue(q); // Display the queue

    enqueue(q, 60); // Try to enqueue another element
    displayQueue(q); // Display the queue

    // Dequeue all elements
    dequeue(q);
    dequeue(q);
    dequeue(q);
    dequeue(q);
    dequeue(q); // Try to dequeue from an empty queue

    return 0;
}
